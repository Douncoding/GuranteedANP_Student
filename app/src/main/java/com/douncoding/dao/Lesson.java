package com.douncoding.dao;

import java.util.List;
import com.douncoding.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "LESSON".
 */
public class Lesson {

    private Long id;
    private String name;
    private String desc;
    private Integer personnel;
    private Integer enrollment;
    private java.util.Date createAt;
    private java.util.Date updateAt;
    private long pid;
    private long iid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LessonDao myDao;

    private Place place;
    private Long place__resolvedKey;

    private Instructor instructor;
    private Long instructor__resolvedKey;

    private List<LessonTime> lessonTimeList;

    public Lesson() {
    }

    public Lesson(Long id) {
        this.id = id;
    }

    public Lesson(Long id, String name, String desc, Integer personnel, Integer enrollment, java.util.Date createAt, java.util.Date updateAt, long pid, long iid) {
        this.id = id;
        this.name = name;
        this.desc = desc;
        this.personnel = personnel;
        this.enrollment = enrollment;
        this.createAt = createAt;
        this.updateAt = updateAt;
        this.pid = pid;
        this.iid = iid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLessonDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getPersonnel() {
        return personnel;
    }

    public void setPersonnel(Integer personnel) {
        this.personnel = personnel;
    }

    public Integer getEnrollment() {
        return enrollment;
    }

    public void setEnrollment(Integer enrollment) {
        this.enrollment = enrollment;
    }

    public java.util.Date getCreateAt() {
        return createAt;
    }

    public void setCreateAt(java.util.Date createAt) {
        this.createAt = createAt;
    }

    public java.util.Date getUpdateAt() {
        return updateAt;
    }

    public void setUpdateAt(java.util.Date updateAt) {
        this.updateAt = updateAt;
    }

    public long getPid() {
        return pid;
    }

    public void setPid(long pid) {
        this.pid = pid;
    }

    public long getIid() {
        return iid;
    }

    public void setIid(long iid) {
        this.iid = iid;
    }

    /** To-one relationship, resolved on first access. */
    public Place getPlace() {
        long __key = this.pid;
        if (place__resolvedKey == null || !place__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            Place placeNew = targetDao.load(__key);
            synchronized (this) {
                place = placeNew;
            	place__resolvedKey = __key;
            }
        }
        return place;
    }

    public void setPlace(Place place) {
        if (place == null) {
            throw new DaoException("To-one property 'pid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.place = place;
            pid = place.getId();
            place__resolvedKey = pid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Instructor getInstructor() {
        long __key = this.iid;
        if (instructor__resolvedKey == null || !instructor__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InstructorDao targetDao = daoSession.getInstructorDao();
            Instructor instructorNew = targetDao.load(__key);
            synchronized (this) {
                instructor = instructorNew;
            	instructor__resolvedKey = __key;
            }
        }
        return instructor;
    }

    public void setInstructor(Instructor instructor) {
        if (instructor == null) {
            throw new DaoException("To-one property 'iid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.instructor = instructor;
            iid = instructor.getId();
            instructor__resolvedKey = iid;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LessonTime> getLessonTimeList() {
        if (lessonTimeList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LessonTimeDao targetDao = daoSession.getLessonTimeDao();
            List<LessonTime> lessonTimeListNew = targetDao._queryLesson_LessonTimeList(id);
            synchronized (this) {
                if(lessonTimeList == null) {
                    lessonTimeList = lessonTimeListNew;
                }
            }
        }
        return lessonTimeList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLessonTimeList() {
        lessonTimeList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
