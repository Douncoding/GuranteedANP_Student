package com.douncoding.dao;

import com.douncoding.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TRACK".
 */
public class Track {

    private Long id;
    private Integer state;
    private java.util.Date enterTime;
    private java.util.Date exitTime;
    private long lessonTimeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrackDao myDao;

    private LessonTime lessonTime;
    private Long lessonTime__resolvedKey;


    public Track() {
    }

    public Track(Long id) {
        this.id = id;
    }

    public Track(Long id, Integer state, java.util.Date enterTime, java.util.Date exitTime, long lessonTimeId) {
        this.id = id;
        this.state = state;
        this.enterTime = enterTime;
        this.exitTime = exitTime;
        this.lessonTimeId = lessonTimeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrackDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public java.util.Date getEnterTime() {
        return enterTime;
    }

    public void setEnterTime(java.util.Date enterTime) {
        this.enterTime = enterTime;
    }

    public java.util.Date getExitTime() {
        return exitTime;
    }

    public void setExitTime(java.util.Date exitTime) {
        this.exitTime = exitTime;
    }

    public long getLessonTimeId() {
        return lessonTimeId;
    }

    public void setLessonTimeId(long lessonTimeId) {
        this.lessonTimeId = lessonTimeId;
    }

    /** To-one relationship, resolved on first access. */
    public LessonTime getLessonTime() {
        long __key = this.lessonTimeId;
        if (lessonTime__resolvedKey == null || !lessonTime__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LessonTimeDao targetDao = daoSession.getLessonTimeDao();
            LessonTime lessonTimeNew = targetDao.load(__key);
            synchronized (this) {
                lessonTime = lessonTimeNew;
            	lessonTime__resolvedKey = __key;
            }
        }
        return lessonTime;
    }

    public void setLessonTime(LessonTime lessonTime) {
        if (lessonTime == null) {
            throw new DaoException("To-one property 'lessonTimeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.lessonTime = lessonTime;
            lessonTimeId = lessonTime.getId();
            lessonTime__resolvedKey = lessonTimeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
